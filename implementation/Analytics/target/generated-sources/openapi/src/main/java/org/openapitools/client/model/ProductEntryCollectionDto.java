/*
 * Product API
 * Manage products, supplies and shopping carts.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ProductEntryCollectionTypeDto;
import org.openapitools.client.model.ProductEntryDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductEntryCollectionDto
 */
@lombok.Builder @lombok.AllArgsConstructor
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-05T07:47:26.265671400+01:00[Europe/Berlin]")
public class ProductEntryCollectionDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ProductEntryCollectionTypeDto type;

  public static final String SERIALIZED_NAME_PRODUCT_ENTRIES = "productEntries";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ENTRIES)
  private List<ProductEntryDto> productEntries;

  public ProductEntryCollectionDto() {
  }

  public ProductEntryCollectionDto id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public ProductEntryCollectionDto type(ProductEntryCollectionTypeDto type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  public ProductEntryCollectionTypeDto getType() {
    return type;
  }


  public void setType(ProductEntryCollectionTypeDto type) {
    this.type = type;
  }


  public ProductEntryCollectionDto productEntries(List<ProductEntryDto> productEntries) {
    
    this.productEntries = productEntries;
    return this;
  }

  public ProductEntryCollectionDto addProductEntriesItem(ProductEntryDto productEntriesItem) {
    if (this.productEntries == null) {
      this.productEntries = new ArrayList<>();
    }
    this.productEntries.add(productEntriesItem);
    return this;
  }

   /**
   * Get productEntries
   * @return productEntries
  **/
  @jakarta.annotation.Nullable
  public List<ProductEntryDto> getProductEntries() {
    return productEntries;
  }


  public void setProductEntries(List<ProductEntryDto> productEntries) {
    this.productEntries = productEntries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductEntryCollectionDto productEntryCollectionDto = (ProductEntryCollectionDto) o;
    return Objects.equals(this.id, productEntryCollectionDto.id) &&
        Objects.equals(this.type, productEntryCollectionDto.type) &&
        Objects.equals(this.productEntries, productEntryCollectionDto.productEntries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, productEntries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductEntryCollectionDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    productEntries: ").append(toIndentedString(productEntries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("productEntries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ProductEntryCollectionDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductEntryCollectionDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductEntryCollectionDto is not found in the empty JSON string", ProductEntryCollectionDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductEntryCollectionDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductEntryCollectionDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        ProductEntryCollectionTypeDto.validateJsonElement(jsonObj.get("type"));
      }
      if (jsonObj.get("productEntries") != null && !jsonObj.get("productEntries").isJsonNull()) {
        JsonArray jsonArrayproductEntries = jsonObj.getAsJsonArray("productEntries");
        if (jsonArrayproductEntries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productEntries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productEntries` to be an array in the JSON string but got `%s`", jsonObj.get("productEntries").toString()));
          }

          // validate the optional field `productEntries` (array)
          for (int i = 0; i < jsonArrayproductEntries.size(); i++) {
            ProductEntryDto.validateJsonElement(jsonArrayproductEntries.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductEntryCollectionDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductEntryCollectionDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductEntryCollectionDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductEntryCollectionDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductEntryCollectionDto>() {
           @Override
           public void write(JsonWriter out, ProductEntryCollectionDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductEntryCollectionDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductEntryCollectionDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductEntryCollectionDto
  * @throws IOException if the JSON string is invalid with respect to ProductEntryCollectionDto
  */
  public static ProductEntryCollectionDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductEntryCollectionDto.class);
  }

 /**
  * Convert an instance of ProductEntryCollectionDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

