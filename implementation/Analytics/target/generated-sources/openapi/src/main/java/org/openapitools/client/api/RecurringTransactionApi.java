/*
 * Transaction API
 * Manage the lifecycle of one-time and recurring transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RecurringTransactionDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecurringTransactionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecurringTransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecurringTransactionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for transactionsRecurringGet
     * @param sourceBankAccount Filter for Transactions with given source bank account ID. (optional)
     * @param targetBankAccount Filter for Transactions with given target bank account ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a list of all existing recurring transactions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRecurringGetCall(UUID sourceBankAccount, UUID targetBankAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/recurring";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceBankAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceBankAccount", sourceBankAccount));
        }

        if (targetBankAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetBankAccount", targetBankAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsRecurringGetValidateBeforeCall(UUID sourceBankAccount, UUID targetBankAccount, final ApiCallback _callback) throws ApiException {
        return transactionsRecurringGetCall(sourceBankAccount, targetBankAccount, _callback);

    }

    /**
     * Get all recurring transactions
     * 
     * @param sourceBankAccount Filter for Transactions with given source bank account ID. (optional)
     * @param targetBankAccount Filter for Transactions with given target bank account ID. (optional)
     * @return List&lt;RecurringTransactionDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a list of all existing recurring transactions. </td><td>  -  </td></tr>
     </table>
     */
    public List<RecurringTransactionDto> transactionsRecurringGet(UUID sourceBankAccount, UUID targetBankAccount) throws ApiException {
        ApiResponse<List<RecurringTransactionDto>> localVarResp = transactionsRecurringGetWithHttpInfo(sourceBankAccount, targetBankAccount);
        return localVarResp.getData();
    }

    /**
     * Get all recurring transactions
     * 
     * @param sourceBankAccount Filter for Transactions with given source bank account ID. (optional)
     * @param targetBankAccount Filter for Transactions with given target bank account ID. (optional)
     * @return ApiResponse&lt;List&lt;RecurringTransactionDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a list of all existing recurring transactions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RecurringTransactionDto>> transactionsRecurringGetWithHttpInfo(UUID sourceBankAccount, UUID targetBankAccount) throws ApiException {
        okhttp3.Call localVarCall = transactionsRecurringGetValidateBeforeCall(sourceBankAccount, targetBankAccount, null);
        Type localVarReturnType = new TypeToken<List<RecurringTransactionDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all recurring transactions (asynchronously)
     * 
     * @param sourceBankAccount Filter for Transactions with given source bank account ID. (optional)
     * @param targetBankAccount Filter for Transactions with given target bank account ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a list of all existing recurring transactions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRecurringGetAsync(UUID sourceBankAccount, UUID targetBankAccount, final ApiCallback<List<RecurringTransactionDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsRecurringGetValidateBeforeCall(sourceBankAccount, targetBankAccount, _callback);
        Type localVarReturnType = new TypeToken<List<RecurringTransactionDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsRecurringIdDelete
     * @param id Transaction ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted recurring transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurring transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRecurringIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/recurring/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsRecurringIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transactionsRecurringIdDelete(Async)");
        }

        return transactionsRecurringIdDeleteCall(id, _callback);

    }

    /**
     * Delete recurring transaction by ID
     * 
     * @param id Transaction ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted recurring transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurring transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public void transactionsRecurringIdDelete(String id) throws ApiException {
        transactionsRecurringIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete recurring transaction by ID
     * 
     * @param id Transaction ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted recurring transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurring transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionsRecurringIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = transactionsRecurringIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete recurring transaction by ID (asynchronously)
     * 
     * @param id Transaction ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted recurring transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurring transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRecurringIdDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsRecurringIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsRecurringIdGet
     * @param id Transaction ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved recurring transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurring transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRecurringIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/recurring/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsRecurringIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transactionsRecurringIdGet(Async)");
        }

        return transactionsRecurringIdGetCall(id, _callback);

    }

    /**
     * Get recurring transaction by ID
     * 
     * @param id Transaction ID (required)
     * @return RecurringTransactionDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved recurring transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurring transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public RecurringTransactionDto transactionsRecurringIdGet(String id) throws ApiException {
        ApiResponse<RecurringTransactionDto> localVarResp = transactionsRecurringIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get recurring transaction by ID
     * 
     * @param id Transaction ID (required)
     * @return ApiResponse&lt;RecurringTransactionDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved recurring transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurring transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecurringTransactionDto> transactionsRecurringIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = transactionsRecurringIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RecurringTransactionDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get recurring transaction by ID (asynchronously)
     * 
     * @param id Transaction ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved recurring transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurring transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRecurringIdGetAsync(String id, final ApiCallback<RecurringTransactionDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsRecurringIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RecurringTransactionDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsRecurringIdPatch
     * @param id Transaction ID (required)
     * @param recurringTransactionDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurring transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRecurringIdPatchCall(String id, RecurringTransactionDto recurringTransactionDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recurringTransactionDto;

        // create path and map variables
        String localVarPath = "/transactions/recurring/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsRecurringIdPatchValidateBeforeCall(String id, RecurringTransactionDto recurringTransactionDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transactionsRecurringIdPatch(Async)");
        }

        // verify the required parameter 'recurringTransactionDto' is set
        if (recurringTransactionDto == null) {
            throw new ApiException("Missing the required parameter 'recurringTransactionDto' when calling transactionsRecurringIdPatch(Async)");
        }

        return transactionsRecurringIdPatchCall(id, recurringTransactionDto, _callback);

    }

    /**
     * Update recurring transaction by ID
     * 
     * @param id Transaction ID (required)
     * @param recurringTransactionDto  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurring transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public void transactionsRecurringIdPatch(String id, RecurringTransactionDto recurringTransactionDto) throws ApiException {
        transactionsRecurringIdPatchWithHttpInfo(id, recurringTransactionDto);
    }

    /**
     * Update recurring transaction by ID
     * 
     * @param id Transaction ID (required)
     * @param recurringTransactionDto  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurring transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionsRecurringIdPatchWithHttpInfo(String id, RecurringTransactionDto recurringTransactionDto) throws ApiException {
        okhttp3.Call localVarCall = transactionsRecurringIdPatchValidateBeforeCall(id, recurringTransactionDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update recurring transaction by ID (asynchronously)
     * 
     * @param id Transaction ID (required)
     * @param recurringTransactionDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Recurring transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRecurringIdPatchAsync(String id, RecurringTransactionDto recurringTransactionDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsRecurringIdPatchValidateBeforeCall(id, recurringTransactionDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsRecurringPost
     * @param recurringTransactionDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new recurring transactions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRecurringPostCall(RecurringTransactionDto recurringTransactionDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recurringTransactionDto;

        // create path and map variables
        String localVarPath = "/transactions/recurring";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsRecurringPostValidateBeforeCall(RecurringTransactionDto recurringTransactionDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recurringTransactionDto' is set
        if (recurringTransactionDto == null) {
            throw new ApiException("Missing the required parameter 'recurringTransactionDto' when calling transactionsRecurringPost(Async)");
        }

        return transactionsRecurringPostCall(recurringTransactionDto, _callback);

    }

    /**
     * Create new recurring transaction
     * 
     * @param recurringTransactionDto  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new recurring transactions. </td><td>  -  </td></tr>
     </table>
     */
    public void transactionsRecurringPost(RecurringTransactionDto recurringTransactionDto) throws ApiException {
        transactionsRecurringPostWithHttpInfo(recurringTransactionDto);
    }

    /**
     * Create new recurring transaction
     * 
     * @param recurringTransactionDto  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new recurring transactions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionsRecurringPostWithHttpInfo(RecurringTransactionDto recurringTransactionDto) throws ApiException {
        okhttp3.Call localVarCall = transactionsRecurringPostValidateBeforeCall(recurringTransactionDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create new recurring transaction (asynchronously)
     * 
     * @param recurringTransactionDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new recurring transactions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRecurringPostAsync(RecurringTransactionDto recurringTransactionDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsRecurringPostValidateBeforeCall(recurringTransactionDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
