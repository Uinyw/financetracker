/*
 * Savings Goal
 * Manage periodical and rule-based savings goals.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AchievementStatusDto;
import org.openapitools.client.model.MatchingTypeDto;
import org.openapitools.client.model.RuleDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RuleBasedSavingsGoalDto
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-05T07:47:19.408138700+01:00[Europe/Berlin]")
public class RuleBasedSavingsGoalDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ACHIEVEMENT_STATUS = "achievementStatus";
  @SerializedName(SERIALIZED_NAME_ACHIEVEMENT_STATUS)
  private AchievementStatusDto achievementStatus;

  public static final String SERIALIZED_NAME_MATCHING_TYPE = "matchingType";
  @SerializedName(SERIALIZED_NAME_MATCHING_TYPE)
  private MatchingTypeDto matchingType;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<RuleDto> rules;

  public RuleBasedSavingsGoalDto() {
  }

  public RuleBasedSavingsGoalDto id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public RuleBasedSavingsGoalDto name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public RuleBasedSavingsGoalDto description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public RuleBasedSavingsGoalDto achievementStatus(AchievementStatusDto achievementStatus) {
    
    this.achievementStatus = achievementStatus;
    return this;
  }

   /**
   * Get achievementStatus
   * @return achievementStatus
  **/
  @jakarta.annotation.Nullable
  public AchievementStatusDto getAchievementStatus() {
    return achievementStatus;
  }


  public void setAchievementStatus(AchievementStatusDto achievementStatus) {
    this.achievementStatus = achievementStatus;
  }


  public RuleBasedSavingsGoalDto matchingType(MatchingTypeDto matchingType) {
    
    this.matchingType = matchingType;
    return this;
  }

   /**
   * Get matchingType
   * @return matchingType
  **/
  @jakarta.annotation.Nullable
  public MatchingTypeDto getMatchingType() {
    return matchingType;
  }


  public void setMatchingType(MatchingTypeDto matchingType) {
    this.matchingType = matchingType;
  }


  public RuleBasedSavingsGoalDto rules(List<RuleDto> rules) {
    
    this.rules = rules;
    return this;
  }

  public RuleBasedSavingsGoalDto addRulesItem(RuleDto rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * Get rules
   * @return rules
  **/
  @jakarta.annotation.Nullable
  public List<RuleDto> getRules() {
    return rules;
  }


  public void setRules(List<RuleDto> rules) {
    this.rules = rules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleBasedSavingsGoalDto ruleBasedSavingsGoalDto = (RuleBasedSavingsGoalDto) o;
    return Objects.equals(this.id, ruleBasedSavingsGoalDto.id) &&
        Objects.equals(this.name, ruleBasedSavingsGoalDto.name) &&
        Objects.equals(this.description, ruleBasedSavingsGoalDto.description) &&
        Objects.equals(this.achievementStatus, ruleBasedSavingsGoalDto.achievementStatus) &&
        Objects.equals(this.matchingType, ruleBasedSavingsGoalDto.matchingType) &&
        Objects.equals(this.rules, ruleBasedSavingsGoalDto.rules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, achievementStatus, matchingType, rules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleBasedSavingsGoalDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    achievementStatus: ").append(toIndentedString(achievementStatus)).append("\n");
    sb.append("    matchingType: ").append(toIndentedString(matchingType)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("achievementStatus");
    openapiFields.add("matchingType");
    openapiFields.add("rules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RuleBasedSavingsGoalDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleBasedSavingsGoalDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleBasedSavingsGoalDto is not found in the empty JSON string", RuleBasedSavingsGoalDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleBasedSavingsGoalDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleBasedSavingsGoalDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `achievementStatus`
      if (jsonObj.get("achievementStatus") != null && !jsonObj.get("achievementStatus").isJsonNull()) {
        AchievementStatusDto.validateJsonElement(jsonObj.get("achievementStatus"));
      }
      // validate the optional field `matchingType`
      if (jsonObj.get("matchingType") != null && !jsonObj.get("matchingType").isJsonNull()) {
        MatchingTypeDto.validateJsonElement(jsonObj.get("matchingType"));
      }
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            RuleDto.validateJsonElement(jsonArrayrules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleBasedSavingsGoalDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleBasedSavingsGoalDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleBasedSavingsGoalDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleBasedSavingsGoalDto.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleBasedSavingsGoalDto>() {
           @Override
           public void write(JsonWriter out, RuleBasedSavingsGoalDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleBasedSavingsGoalDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RuleBasedSavingsGoalDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RuleBasedSavingsGoalDto
  * @throws IOException if the JSON string is invalid with respect to RuleBasedSavingsGoalDto
  */
  public static RuleBasedSavingsGoalDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleBasedSavingsGoalDto.class);
  }

 /**
  * Convert an instance of RuleBasedSavingsGoalDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

