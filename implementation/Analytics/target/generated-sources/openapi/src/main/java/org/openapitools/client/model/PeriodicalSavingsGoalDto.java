/*
 * Savings Goal
 * Manage periodical and rule-based savings goals.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AchievementStatusDto;
import org.openapitools.client.model.MonetaryAmountDto;
import org.openapitools.client.model.PeriodicityDto;
import org.openapitools.client.model.SavingsRecordDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PeriodicalSavingsGoalDto
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-05T07:47:19.408138700+01:00[Europe/Berlin]")
public class PeriodicalSavingsGoalDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ACHIEVEMENT_STATUS = "achievementStatus";
  @SerializedName(SERIALIZED_NAME_ACHIEVEMENT_STATUS)
  private AchievementStatusDto achievementStatus;

  public static final String SERIALIZED_NAME_SOURCE_BANK_ACCOUNT_ID = "sourceBankAccountId";
  @SerializedName(SERIALIZED_NAME_SOURCE_BANK_ACCOUNT_ID)
  private UUID sourceBankAccountId;

  public static final String SERIALIZED_NAME_TARGET_BANK_ACCOUNT_ID = "targetBankAccountId";
  @SerializedName(SERIALIZED_NAME_TARGET_BANK_ACCOUNT_ID)
  private UUID targetBankAccountId;

  public static final String SERIALIZED_NAME_GOAL = "goal";
  @SerializedName(SERIALIZED_NAME_GOAL)
  private MonetaryAmountDto goal;

  public static final String SERIALIZED_NAME_RECURRING_RATE = "recurringRate";
  @SerializedName(SERIALIZED_NAME_RECURRING_RATE)
  private Double recurringRate;

  public static final String SERIALIZED_NAME_RECURRING_AMOUNT = "recurringAmount";
  @SerializedName(SERIALIZED_NAME_RECURRING_AMOUNT)
  private MonetaryAmountDto recurringAmount;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_PERIODICITY = "periodicity";
  @SerializedName(SERIALIZED_NAME_PERIODICITY)
  private PeriodicityDto periodicity;

  public static final String SERIALIZED_NAME_SAVINGS_RECORDS = "savingsRecords";
  @SerializedName(SERIALIZED_NAME_SAVINGS_RECORDS)
  private List<SavingsRecordDto> savingsRecords;

  public PeriodicalSavingsGoalDto() {
  }

  public PeriodicalSavingsGoalDto id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public PeriodicalSavingsGoalDto name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PeriodicalSavingsGoalDto description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public PeriodicalSavingsGoalDto achievementStatus(AchievementStatusDto achievementStatus) {
    
    this.achievementStatus = achievementStatus;
    return this;
  }

   /**
   * Get achievementStatus
   * @return achievementStatus
  **/
  @jakarta.annotation.Nullable
  public AchievementStatusDto getAchievementStatus() {
    return achievementStatus;
  }


  public void setAchievementStatus(AchievementStatusDto achievementStatus) {
    this.achievementStatus = achievementStatus;
  }


  public PeriodicalSavingsGoalDto sourceBankAccountId(UUID sourceBankAccountId) {
    
    this.sourceBankAccountId = sourceBankAccountId;
    return this;
  }

   /**
   * Get sourceBankAccountId
   * @return sourceBankAccountId
  **/
  @jakarta.annotation.Nullable
  public UUID getSourceBankAccountId() {
    return sourceBankAccountId;
  }


  public void setSourceBankAccountId(UUID sourceBankAccountId) {
    this.sourceBankAccountId = sourceBankAccountId;
  }


  public PeriodicalSavingsGoalDto targetBankAccountId(UUID targetBankAccountId) {
    
    this.targetBankAccountId = targetBankAccountId;
    return this;
  }

   /**
   * Get targetBankAccountId
   * @return targetBankAccountId
  **/
  @jakarta.annotation.Nullable
  public UUID getTargetBankAccountId() {
    return targetBankAccountId;
  }


  public void setTargetBankAccountId(UUID targetBankAccountId) {
    this.targetBankAccountId = targetBankAccountId;
  }


  public PeriodicalSavingsGoalDto goal(MonetaryAmountDto goal) {
    
    this.goal = goal;
    return this;
  }

   /**
   * Get goal
   * @return goal
  **/
  @jakarta.annotation.Nullable
  public MonetaryAmountDto getGoal() {
    return goal;
  }


  public void setGoal(MonetaryAmountDto goal) {
    this.goal = goal;
  }


  public PeriodicalSavingsGoalDto recurringRate(Double recurringRate) {
    
    this.recurringRate = recurringRate;
    return this;
  }

   /**
   * Get recurringRate
   * @return recurringRate
  **/
  @jakarta.annotation.Nullable
  public Double getRecurringRate() {
    return recurringRate;
  }


  public void setRecurringRate(Double recurringRate) {
    this.recurringRate = recurringRate;
  }


  public PeriodicalSavingsGoalDto recurringAmount(MonetaryAmountDto recurringAmount) {
    
    this.recurringAmount = recurringAmount;
    return this;
  }

   /**
   * Get recurringAmount
   * @return recurringAmount
  **/
  @jakarta.annotation.Nullable
  public MonetaryAmountDto getRecurringAmount() {
    return recurringAmount;
  }


  public void setRecurringAmount(MonetaryAmountDto recurringAmount) {
    this.recurringAmount = recurringAmount;
  }


  public PeriodicalSavingsGoalDto duration(String duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @jakarta.annotation.Nullable
  public String getDuration() {
    return duration;
  }


  public void setDuration(String duration) {
    this.duration = duration;
  }


  public PeriodicalSavingsGoalDto periodicity(PeriodicityDto periodicity) {
    
    this.periodicity = periodicity;
    return this;
  }

   /**
   * Get periodicity
   * @return periodicity
  **/
  @jakarta.annotation.Nullable
  public PeriodicityDto getPeriodicity() {
    return periodicity;
  }


  public void setPeriodicity(PeriodicityDto periodicity) {
    this.periodicity = periodicity;
  }


  public PeriodicalSavingsGoalDto savingsRecords(List<SavingsRecordDto> savingsRecords) {
    
    this.savingsRecords = savingsRecords;
    return this;
  }

  public PeriodicalSavingsGoalDto addSavingsRecordsItem(SavingsRecordDto savingsRecordsItem) {
    if (this.savingsRecords == null) {
      this.savingsRecords = new ArrayList<>();
    }
    this.savingsRecords.add(savingsRecordsItem);
    return this;
  }

   /**
   * Get savingsRecords
   * @return savingsRecords
  **/
  @jakarta.annotation.Nullable
  public List<SavingsRecordDto> getSavingsRecords() {
    return savingsRecords;
  }


  public void setSavingsRecords(List<SavingsRecordDto> savingsRecords) {
    this.savingsRecords = savingsRecords;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeriodicalSavingsGoalDto periodicalSavingsGoalDto = (PeriodicalSavingsGoalDto) o;
    return Objects.equals(this.id, periodicalSavingsGoalDto.id) &&
        Objects.equals(this.name, periodicalSavingsGoalDto.name) &&
        Objects.equals(this.description, periodicalSavingsGoalDto.description) &&
        Objects.equals(this.achievementStatus, periodicalSavingsGoalDto.achievementStatus) &&
        Objects.equals(this.sourceBankAccountId, periodicalSavingsGoalDto.sourceBankAccountId) &&
        Objects.equals(this.targetBankAccountId, periodicalSavingsGoalDto.targetBankAccountId) &&
        Objects.equals(this.goal, periodicalSavingsGoalDto.goal) &&
        Objects.equals(this.recurringRate, periodicalSavingsGoalDto.recurringRate) &&
        Objects.equals(this.recurringAmount, periodicalSavingsGoalDto.recurringAmount) &&
        Objects.equals(this.duration, periodicalSavingsGoalDto.duration) &&
        Objects.equals(this.periodicity, periodicalSavingsGoalDto.periodicity) &&
        Objects.equals(this.savingsRecords, periodicalSavingsGoalDto.savingsRecords);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, achievementStatus, sourceBankAccountId, targetBankAccountId, goal, recurringRate, recurringAmount, duration, periodicity, savingsRecords);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeriodicalSavingsGoalDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    achievementStatus: ").append(toIndentedString(achievementStatus)).append("\n");
    sb.append("    sourceBankAccountId: ").append(toIndentedString(sourceBankAccountId)).append("\n");
    sb.append("    targetBankAccountId: ").append(toIndentedString(targetBankAccountId)).append("\n");
    sb.append("    goal: ").append(toIndentedString(goal)).append("\n");
    sb.append("    recurringRate: ").append(toIndentedString(recurringRate)).append("\n");
    sb.append("    recurringAmount: ").append(toIndentedString(recurringAmount)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    periodicity: ").append(toIndentedString(periodicity)).append("\n");
    sb.append("    savingsRecords: ").append(toIndentedString(savingsRecords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("achievementStatus");
    openapiFields.add("sourceBankAccountId");
    openapiFields.add("targetBankAccountId");
    openapiFields.add("goal");
    openapiFields.add("recurringRate");
    openapiFields.add("recurringAmount");
    openapiFields.add("duration");
    openapiFields.add("periodicity");
    openapiFields.add("savingsRecords");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PeriodicalSavingsGoalDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PeriodicalSavingsGoalDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PeriodicalSavingsGoalDto is not found in the empty JSON string", PeriodicalSavingsGoalDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PeriodicalSavingsGoalDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PeriodicalSavingsGoalDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `achievementStatus`
      if (jsonObj.get("achievementStatus") != null && !jsonObj.get("achievementStatus").isJsonNull()) {
        AchievementStatusDto.validateJsonElement(jsonObj.get("achievementStatus"));
      }
      if ((jsonObj.get("sourceBankAccountId") != null && !jsonObj.get("sourceBankAccountId").isJsonNull()) && !jsonObj.get("sourceBankAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceBankAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceBankAccountId").toString()));
      }
      if ((jsonObj.get("targetBankAccountId") != null && !jsonObj.get("targetBankAccountId").isJsonNull()) && !jsonObj.get("targetBankAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetBankAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetBankAccountId").toString()));
      }
      // validate the optional field `goal`
      if (jsonObj.get("goal") != null && !jsonObj.get("goal").isJsonNull()) {
        MonetaryAmountDto.validateJsonElement(jsonObj.get("goal"));
      }
      // validate the optional field `recurringAmount`
      if (jsonObj.get("recurringAmount") != null && !jsonObj.get("recurringAmount").isJsonNull()) {
        MonetaryAmountDto.validateJsonElement(jsonObj.get("recurringAmount"));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      // validate the optional field `periodicity`
      if (jsonObj.get("periodicity") != null && !jsonObj.get("periodicity").isJsonNull()) {
        PeriodicityDto.validateJsonElement(jsonObj.get("periodicity"));
      }
      if (jsonObj.get("savingsRecords") != null && !jsonObj.get("savingsRecords").isJsonNull()) {
        JsonArray jsonArraysavingsRecords = jsonObj.getAsJsonArray("savingsRecords");
        if (jsonArraysavingsRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("savingsRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `savingsRecords` to be an array in the JSON string but got `%s`", jsonObj.get("savingsRecords").toString()));
          }

          // validate the optional field `savingsRecords` (array)
          for (int i = 0; i < jsonArraysavingsRecords.size(); i++) {
            SavingsRecordDto.validateJsonElement(jsonArraysavingsRecords.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PeriodicalSavingsGoalDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PeriodicalSavingsGoalDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PeriodicalSavingsGoalDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PeriodicalSavingsGoalDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PeriodicalSavingsGoalDto>() {
           @Override
           public void write(JsonWriter out, PeriodicalSavingsGoalDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PeriodicalSavingsGoalDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PeriodicalSavingsGoalDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PeriodicalSavingsGoalDto
  * @throws IOException if the JSON string is invalid with respect to PeriodicalSavingsGoalDto
  */
  public static PeriodicalSavingsGoalDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PeriodicalSavingsGoalDto.class);
  }

 /**
  * Convert an instance of PeriodicalSavingsGoalDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

