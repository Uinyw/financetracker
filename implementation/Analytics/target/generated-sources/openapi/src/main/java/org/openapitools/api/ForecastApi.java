/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ForecastDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-05T07:47:16.544140400+01:00[Europe/Berlin]")
@Validated
@Tag(name = "Analytics", description = "the Analytics API")
public interface ForecastApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /forecast : Create a new budget forecast for the bank accounts
     *
     * @param date Retrieve a detailed forcast using its unique identifier. (required)
     * @return Successful response (status code 200)
     *         or Forecast not createable (status code 404)
     */
    @Operation(
        operationId = "forecastGet",
        summary = "Create a new budget forecast for the bank accounts",
        tags = { "Analytics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ForecastDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Forecast not createable")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/forecast",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ForecastDto> forecastGet(
        @NotNull @Parameter(name = "date", description = "Retrieve a detailed forcast using its unique identifier.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "date", required = true) String date
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"date\", \"plan\" : [ { \"bankAccount\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"monetaryAmount\" : { \"amount\" : 0.8008281904610115 } }, { \"bankAccount\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"monetaryAmount\" : { \"amount\" : 0.8008281904610115 } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
