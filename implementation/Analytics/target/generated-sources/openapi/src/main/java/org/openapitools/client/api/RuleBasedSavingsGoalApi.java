/*
 * Savings Goal
 * Manage periodical and rule-based savings goals.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RuleBasedSavingsGoalDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RuleBasedSavingsGoalApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RuleBasedSavingsGoalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RuleBasedSavingsGoalApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for savingsGoalsRuleBasedGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a list of all existing rule-based savings goals. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call savingsGoalsRuleBasedGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/savings-goals/rule-based";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call savingsGoalsRuleBasedGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return savingsGoalsRuleBasedGetCall(_callback);

    }

    /**
     * Get all Rule-based Savings Goals
     * 
     * @return List&lt;RuleBasedSavingsGoalDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a list of all existing rule-based savings goals. </td><td>  -  </td></tr>
     </table>
     */
    public List<RuleBasedSavingsGoalDto> savingsGoalsRuleBasedGet() throws ApiException {
        ApiResponse<List<RuleBasedSavingsGoalDto>> localVarResp = savingsGoalsRuleBasedGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all Rule-based Savings Goals
     * 
     * @return ApiResponse&lt;List&lt;RuleBasedSavingsGoalDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a list of all existing rule-based savings goals. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RuleBasedSavingsGoalDto>> savingsGoalsRuleBasedGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = savingsGoalsRuleBasedGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<RuleBasedSavingsGoalDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Rule-based Savings Goals (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a list of all existing rule-based savings goals. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call savingsGoalsRuleBasedGetAsync(final ApiCallback<List<RuleBasedSavingsGoalDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = savingsGoalsRuleBasedGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<RuleBasedSavingsGoalDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for savingsGoalsRuleBasedIdDelete
     * @param id Savings Goal ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule Based Savings Goal deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule Based Savings Goal not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call savingsGoalsRuleBasedIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/savings-goals/rule-based/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call savingsGoalsRuleBasedIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling savingsGoalsRuleBasedIdDelete(Async)");
        }

        return savingsGoalsRuleBasedIdDeleteCall(id, _callback);

    }

    /**
     * Delete Rule-based Savings Goal by ID
     * 
     * @param id Savings Goal ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule Based Savings Goal deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule Based Savings Goal not found </td><td>  -  </td></tr>
     </table>
     */
    public void savingsGoalsRuleBasedIdDelete(String id) throws ApiException {
        savingsGoalsRuleBasedIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete Rule-based Savings Goal by ID
     * 
     * @param id Savings Goal ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule Based Savings Goal deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule Based Savings Goal not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> savingsGoalsRuleBasedIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = savingsGoalsRuleBasedIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Rule-based Savings Goal by ID (asynchronously)
     * 
     * @param id Savings Goal ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule Based Savings Goal deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule Based Savings Goal not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call savingsGoalsRuleBasedIdDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = savingsGoalsRuleBasedIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for savingsGoalsRuleBasedIdGet
     * @param id Savings Goal ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Savings Goal retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Savings Goal not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call savingsGoalsRuleBasedIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/savings-goals/rule-based/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call savingsGoalsRuleBasedIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling savingsGoalsRuleBasedIdGet(Async)");
        }

        return savingsGoalsRuleBasedIdGetCall(id, _callback);

    }

    /**
     * Get Rule-based Savings Goal by ID
     * 
     * @param id Savings Goal ID. (required)
     * @return RuleBasedSavingsGoalDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Savings Goal retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Savings Goal not found </td><td>  -  </td></tr>
     </table>
     */
    public RuleBasedSavingsGoalDto savingsGoalsRuleBasedIdGet(String id) throws ApiException {
        ApiResponse<RuleBasedSavingsGoalDto> localVarResp = savingsGoalsRuleBasedIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Rule-based Savings Goal by ID
     * 
     * @param id Savings Goal ID. (required)
     * @return ApiResponse&lt;RuleBasedSavingsGoalDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Savings Goal retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Savings Goal not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleBasedSavingsGoalDto> savingsGoalsRuleBasedIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = savingsGoalsRuleBasedIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RuleBasedSavingsGoalDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Rule-based Savings Goal by ID (asynchronously)
     * 
     * @param id Savings Goal ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Savings Goal retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Savings Goal not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call savingsGoalsRuleBasedIdGetAsync(String id, final ApiCallback<RuleBasedSavingsGoalDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = savingsGoalsRuleBasedIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RuleBasedSavingsGoalDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for savingsGoalsRuleBasedIdPatch
     * @param id Savings Goal ID. (required)
     * @param ruleBasedSavingsGoalDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule Based Savings Goal updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule Based Savings Goal not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call savingsGoalsRuleBasedIdPatchCall(String id, RuleBasedSavingsGoalDto ruleBasedSavingsGoalDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ruleBasedSavingsGoalDto;

        // create path and map variables
        String localVarPath = "/savings-goals/rule-based/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call savingsGoalsRuleBasedIdPatchValidateBeforeCall(String id, RuleBasedSavingsGoalDto ruleBasedSavingsGoalDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling savingsGoalsRuleBasedIdPatch(Async)");
        }

        // verify the required parameter 'ruleBasedSavingsGoalDto' is set
        if (ruleBasedSavingsGoalDto == null) {
            throw new ApiException("Missing the required parameter 'ruleBasedSavingsGoalDto' when calling savingsGoalsRuleBasedIdPatch(Async)");
        }

        return savingsGoalsRuleBasedIdPatchCall(id, ruleBasedSavingsGoalDto, _callback);

    }

    /**
     * Update Rule-based Savings Goal by ID
     * 
     * @param id Savings Goal ID. (required)
     * @param ruleBasedSavingsGoalDto  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule Based Savings Goal updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule Based Savings Goal not found </td><td>  -  </td></tr>
     </table>
     */
    public void savingsGoalsRuleBasedIdPatch(String id, RuleBasedSavingsGoalDto ruleBasedSavingsGoalDto) throws ApiException {
        savingsGoalsRuleBasedIdPatchWithHttpInfo(id, ruleBasedSavingsGoalDto);
    }

    /**
     * Update Rule-based Savings Goal by ID
     * 
     * @param id Savings Goal ID. (required)
     * @param ruleBasedSavingsGoalDto  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule Based Savings Goal updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule Based Savings Goal not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> savingsGoalsRuleBasedIdPatchWithHttpInfo(String id, RuleBasedSavingsGoalDto ruleBasedSavingsGoalDto) throws ApiException {
        okhttp3.Call localVarCall = savingsGoalsRuleBasedIdPatchValidateBeforeCall(id, ruleBasedSavingsGoalDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Rule-based Savings Goal by ID (asynchronously)
     * 
     * @param id Savings Goal ID. (required)
     * @param ruleBasedSavingsGoalDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule Based Savings Goal updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule Based Savings Goal not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call savingsGoalsRuleBasedIdPatchAsync(String id, RuleBasedSavingsGoalDto ruleBasedSavingsGoalDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = savingsGoalsRuleBasedIdPatchValidateBeforeCall(id, ruleBasedSavingsGoalDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for savingsGoalsRuleBasedPost
     * @param ruleBasedSavingsGoalDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule Based Savings Goal created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call savingsGoalsRuleBasedPostCall(RuleBasedSavingsGoalDto ruleBasedSavingsGoalDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ruleBasedSavingsGoalDto;

        // create path and map variables
        String localVarPath = "/savings-goals/rule-based";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call savingsGoalsRuleBasedPostValidateBeforeCall(RuleBasedSavingsGoalDto ruleBasedSavingsGoalDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleBasedSavingsGoalDto' is set
        if (ruleBasedSavingsGoalDto == null) {
            throw new ApiException("Missing the required parameter 'ruleBasedSavingsGoalDto' when calling savingsGoalsRuleBasedPost(Async)");
        }

        return savingsGoalsRuleBasedPostCall(ruleBasedSavingsGoalDto, _callback);

    }

    /**
     * Create a new Rule-based Savings Goal
     * 
     * @param ruleBasedSavingsGoalDto  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule Based Savings Goal created. </td><td>  -  </td></tr>
     </table>
     */
    public void savingsGoalsRuleBasedPost(RuleBasedSavingsGoalDto ruleBasedSavingsGoalDto) throws ApiException {
        savingsGoalsRuleBasedPostWithHttpInfo(ruleBasedSavingsGoalDto);
    }

    /**
     * Create a new Rule-based Savings Goal
     * 
     * @param ruleBasedSavingsGoalDto  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule Based Savings Goal created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> savingsGoalsRuleBasedPostWithHttpInfo(RuleBasedSavingsGoalDto ruleBasedSavingsGoalDto) throws ApiException {
        okhttp3.Call localVarCall = savingsGoalsRuleBasedPostValidateBeforeCall(ruleBasedSavingsGoalDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new Rule-based Savings Goal (asynchronously)
     * 
     * @param ruleBasedSavingsGoalDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule Based Savings Goal created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call savingsGoalsRuleBasedPostAsync(RuleBasedSavingsGoalDto ruleBasedSavingsGoalDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = savingsGoalsRuleBasedPostValidateBeforeCall(ruleBasedSavingsGoalDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
