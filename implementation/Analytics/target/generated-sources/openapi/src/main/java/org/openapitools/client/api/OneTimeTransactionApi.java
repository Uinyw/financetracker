/*
 * Transaction API
 * Manage the lifecycle of one-time and recurring transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.OneTimeTransactionDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OneTimeTransactionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OneTimeTransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OneTimeTransactionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for transactionsOnetimeGet
     * @param sourceBankAccount Filter for Transactions with given source bank account ID. (optional)
     * @param targetBankAccount Filter for Transactions with given target bank account ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a list of all existing one-time transactions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsOnetimeGetCall(UUID sourceBankAccount, UUID targetBankAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/onetime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceBankAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceBankAccount", sourceBankAccount));
        }

        if (targetBankAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetBankAccount", targetBankAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsOnetimeGetValidateBeforeCall(UUID sourceBankAccount, UUID targetBankAccount, final ApiCallback _callback) throws ApiException {
        return transactionsOnetimeGetCall(sourceBankAccount, targetBankAccount, _callback);

    }

    /**
     * Get all one-time transactions
     * 
     * @param sourceBankAccount Filter for Transactions with given source bank account ID. (optional)
     * @param targetBankAccount Filter for Transactions with given target bank account ID. (optional)
     * @return List&lt;OneTimeTransactionDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a list of all existing one-time transactions. </td><td>  -  </td></tr>
     </table>
     */
    public List<OneTimeTransactionDto> transactionsOnetimeGet(UUID sourceBankAccount, UUID targetBankAccount) throws ApiException {
        ApiResponse<List<OneTimeTransactionDto>> localVarResp = transactionsOnetimeGetWithHttpInfo(sourceBankAccount, targetBankAccount);
        return localVarResp.getData();
    }

    /**
     * Get all one-time transactions
     * 
     * @param sourceBankAccount Filter for Transactions with given source bank account ID. (optional)
     * @param targetBankAccount Filter for Transactions with given target bank account ID. (optional)
     * @return ApiResponse&lt;List&lt;OneTimeTransactionDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a list of all existing one-time transactions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OneTimeTransactionDto>> transactionsOnetimeGetWithHttpInfo(UUID sourceBankAccount, UUID targetBankAccount) throws ApiException {
        okhttp3.Call localVarCall = transactionsOnetimeGetValidateBeforeCall(sourceBankAccount, targetBankAccount, null);
        Type localVarReturnType = new TypeToken<List<OneTimeTransactionDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all one-time transactions (asynchronously)
     * 
     * @param sourceBankAccount Filter for Transactions with given source bank account ID. (optional)
     * @param targetBankAccount Filter for Transactions with given target bank account ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a list of all existing one-time transactions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsOnetimeGetAsync(UUID sourceBankAccount, UUID targetBankAccount, final ApiCallback<List<OneTimeTransactionDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsOnetimeGetValidateBeforeCall(sourceBankAccount, targetBankAccount, _callback);
        Type localVarReturnType = new TypeToken<List<OneTimeTransactionDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsOnetimeIdDelete
     * @param id Transaction ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted one-time transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One-Time transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsOnetimeIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/onetime/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsOnetimeIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transactionsOnetimeIdDelete(Async)");
        }

        return transactionsOnetimeIdDeleteCall(id, _callback);

    }

    /**
     * Delete one-time Transaction by ID
     * 
     * @param id Transaction ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted one-time transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One-Time transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public void transactionsOnetimeIdDelete(String id) throws ApiException {
        transactionsOnetimeIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete one-time Transaction by ID
     * 
     * @param id Transaction ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted one-time transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One-Time transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionsOnetimeIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = transactionsOnetimeIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete one-time Transaction by ID (asynchronously)
     * 
     * @param id Transaction ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted one-time transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One-Time transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsOnetimeIdDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsOnetimeIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsOnetimeIdGet
     * @param id Transaction ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved one-time transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One-Time transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsOnetimeIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/onetime/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsOnetimeIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transactionsOnetimeIdGet(Async)");
        }

        return transactionsOnetimeIdGetCall(id, _callback);

    }

    /**
     * Get one-time transaction by ID
     * 
     * @param id Transaction ID (required)
     * @return OneTimeTransactionDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved one-time transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One-Time transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public OneTimeTransactionDto transactionsOnetimeIdGet(String id) throws ApiException {
        ApiResponse<OneTimeTransactionDto> localVarResp = transactionsOnetimeIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get one-time transaction by ID
     * 
     * @param id Transaction ID (required)
     * @return ApiResponse&lt;OneTimeTransactionDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved one-time transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One-Time transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OneTimeTransactionDto> transactionsOnetimeIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = transactionsOnetimeIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OneTimeTransactionDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get one-time transaction by ID (asynchronously)
     * 
     * @param id Transaction ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved one-time transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One-Time transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsOnetimeIdGetAsync(String id, final ApiCallback<OneTimeTransactionDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsOnetimeIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OneTimeTransactionDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsOnetimeIdPatch
     * @param id Transaction ID (required)
     * @param oneTimeTransactionDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One-Time transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsOnetimeIdPatchCall(String id, OneTimeTransactionDto oneTimeTransactionDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oneTimeTransactionDto;

        // create path and map variables
        String localVarPath = "/transactions/onetime/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsOnetimeIdPatchValidateBeforeCall(String id, OneTimeTransactionDto oneTimeTransactionDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transactionsOnetimeIdPatch(Async)");
        }

        // verify the required parameter 'oneTimeTransactionDto' is set
        if (oneTimeTransactionDto == null) {
            throw new ApiException("Missing the required parameter 'oneTimeTransactionDto' when calling transactionsOnetimeIdPatch(Async)");
        }

        return transactionsOnetimeIdPatchCall(id, oneTimeTransactionDto, _callback);

    }

    /**
     * Update one-time transaction by ID
     * 
     * @param id Transaction ID (required)
     * @param oneTimeTransactionDto  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One-Time transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public void transactionsOnetimeIdPatch(String id, OneTimeTransactionDto oneTimeTransactionDto) throws ApiException {
        transactionsOnetimeIdPatchWithHttpInfo(id, oneTimeTransactionDto);
    }

    /**
     * Update one-time transaction by ID
     * 
     * @param id Transaction ID (required)
     * @param oneTimeTransactionDto  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One-Time transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionsOnetimeIdPatchWithHttpInfo(String id, OneTimeTransactionDto oneTimeTransactionDto) throws ApiException {
        okhttp3.Call localVarCall = transactionsOnetimeIdPatchValidateBeforeCall(id, oneTimeTransactionDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update one-time transaction by ID (asynchronously)
     * 
     * @param id Transaction ID (required)
     * @param oneTimeTransactionDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One-Time transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsOnetimeIdPatchAsync(String id, OneTimeTransactionDto oneTimeTransactionDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsOnetimeIdPatchValidateBeforeCall(id, oneTimeTransactionDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsOnetimeIdTransferPost
     * @param id Transaction ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred one-time transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One-Time transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsOnetimeIdTransferPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/onetime/{id}/transfer"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsOnetimeIdTransferPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transactionsOnetimeIdTransferPost(Async)");
        }

        return transactionsOnetimeIdTransferPostCall(id, _callback);

    }

    /**
     * Transfer one time transaction
     * 
     * @param id Transaction ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred one-time transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One-Time transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public void transactionsOnetimeIdTransferPost(String id) throws ApiException {
        transactionsOnetimeIdTransferPostWithHttpInfo(id);
    }

    /**
     * Transfer one time transaction
     * 
     * @param id Transaction ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred one-time transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One-Time transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionsOnetimeIdTransferPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = transactionsOnetimeIdTransferPostValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Transfer one time transaction (asynchronously)
     * 
     * @param id Transaction ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully transferred one-time transaction. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One-Time transaction with given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsOnetimeIdTransferPostAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsOnetimeIdTransferPostValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsOnetimePost
     * @param oneTimeTransactionDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new one-time transactions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsOnetimePostCall(OneTimeTransactionDto oneTimeTransactionDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oneTimeTransactionDto;

        // create path and map variables
        String localVarPath = "/transactions/onetime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsOnetimePostValidateBeforeCall(OneTimeTransactionDto oneTimeTransactionDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oneTimeTransactionDto' is set
        if (oneTimeTransactionDto == null) {
            throw new ApiException("Missing the required parameter 'oneTimeTransactionDto' when calling transactionsOnetimePost(Async)");
        }

        return transactionsOnetimePostCall(oneTimeTransactionDto, _callback);

    }

    /**
     * Create new one-time transaction
     * 
     * @param oneTimeTransactionDto  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new one-time transactions. </td><td>  -  </td></tr>
     </table>
     */
    public void transactionsOnetimePost(OneTimeTransactionDto oneTimeTransactionDto) throws ApiException {
        transactionsOnetimePostWithHttpInfo(oneTimeTransactionDto);
    }

    /**
     * Create new one-time transaction
     * 
     * @param oneTimeTransactionDto  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new one-time transactions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionsOnetimePostWithHttpInfo(OneTimeTransactionDto oneTimeTransactionDto) throws ApiException {
        okhttp3.Call localVarCall = transactionsOnetimePostValidateBeforeCall(oneTimeTransactionDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create new one-time transaction (asynchronously)
     * 
     * @param oneTimeTransactionDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new one-time transactions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsOnetimePostAsync(OneTimeTransactionDto oneTimeTransactionDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsOnetimePostValidateBeforeCall(oneTimeTransactionDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
