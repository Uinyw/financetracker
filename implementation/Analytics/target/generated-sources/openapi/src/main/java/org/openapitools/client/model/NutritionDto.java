/*
 * Product API
 * Manage products, supplies and shopping carts.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NutritionDto
 */
@lombok.Builder @lombok.AllArgsConstructor
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-05T07:47:26.265671400+01:00[Europe/Berlin]")
public class NutritionDto {
  public static final String SERIALIZED_NAME_SERVING_SIZE = "servingSize";
  @SerializedName(SERIALIZED_NAME_SERVING_SIZE)
  private BigDecimal servingSize;

  public static final String SERIALIZED_NAME_CALORIES = "calories";
  @SerializedName(SERIALIZED_NAME_CALORIES)
  private BigDecimal calories;

  public static final String SERIALIZED_NAME_CARBOHYDRATES = "carbohydrates";
  @SerializedName(SERIALIZED_NAME_CARBOHYDRATES)
  private BigDecimal carbohydrates;

  public static final String SERIALIZED_NAME_PROTEIN = "protein";
  @SerializedName(SERIALIZED_NAME_PROTEIN)
  private BigDecimal protein;

  public static final String SERIALIZED_NAME_FAT = "fat";
  @SerializedName(SERIALIZED_NAME_FAT)
  private BigDecimal fat;

  public static final String SERIALIZED_NAME_SUGAR = "sugar";
  @SerializedName(SERIALIZED_NAME_SUGAR)
  private BigDecimal sugar;

  public NutritionDto() {
  }

  public NutritionDto servingSize(BigDecimal servingSize) {
    
    this.servingSize = servingSize;
    return this;
  }

   /**
   * Get servingSize
   * @return servingSize
  **/
  @jakarta.annotation.Nullable
  public BigDecimal getServingSize() {
    return servingSize;
  }


  public void setServingSize(BigDecimal servingSize) {
    this.servingSize = servingSize;
  }


  public NutritionDto calories(BigDecimal calories) {
    
    this.calories = calories;
    return this;
  }

   /**
   * Get calories
   * @return calories
  **/
  @jakarta.annotation.Nullable
  public BigDecimal getCalories() {
    return calories;
  }


  public void setCalories(BigDecimal calories) {
    this.calories = calories;
  }


  public NutritionDto carbohydrates(BigDecimal carbohydrates) {
    
    this.carbohydrates = carbohydrates;
    return this;
  }

   /**
   * Get carbohydrates
   * @return carbohydrates
  **/
  @jakarta.annotation.Nullable
  public BigDecimal getCarbohydrates() {
    return carbohydrates;
  }


  public void setCarbohydrates(BigDecimal carbohydrates) {
    this.carbohydrates = carbohydrates;
  }


  public NutritionDto protein(BigDecimal protein) {
    
    this.protein = protein;
    return this;
  }

   /**
   * Get protein
   * @return protein
  **/
  @jakarta.annotation.Nullable
  public BigDecimal getProtein() {
    return protein;
  }


  public void setProtein(BigDecimal protein) {
    this.protein = protein;
  }


  public NutritionDto fat(BigDecimal fat) {
    
    this.fat = fat;
    return this;
  }

   /**
   * Get fat
   * @return fat
  **/
  @jakarta.annotation.Nullable
  public BigDecimal getFat() {
    return fat;
  }


  public void setFat(BigDecimal fat) {
    this.fat = fat;
  }


  public NutritionDto sugar(BigDecimal sugar) {
    
    this.sugar = sugar;
    return this;
  }

   /**
   * Get sugar
   * @return sugar
  **/
  @jakarta.annotation.Nullable
  public BigDecimal getSugar() {
    return sugar;
  }


  public void setSugar(BigDecimal sugar) {
    this.sugar = sugar;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NutritionDto nutritionDto = (NutritionDto) o;
    return Objects.equals(this.servingSize, nutritionDto.servingSize) &&
        Objects.equals(this.calories, nutritionDto.calories) &&
        Objects.equals(this.carbohydrates, nutritionDto.carbohydrates) &&
        Objects.equals(this.protein, nutritionDto.protein) &&
        Objects.equals(this.fat, nutritionDto.fat) &&
        Objects.equals(this.sugar, nutritionDto.sugar);
  }

  @Override
  public int hashCode() {
    return Objects.hash(servingSize, calories, carbohydrates, protein, fat, sugar);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NutritionDto {\n");
    sb.append("    servingSize: ").append(toIndentedString(servingSize)).append("\n");
    sb.append("    calories: ").append(toIndentedString(calories)).append("\n");
    sb.append("    carbohydrates: ").append(toIndentedString(carbohydrates)).append("\n");
    sb.append("    protein: ").append(toIndentedString(protein)).append("\n");
    sb.append("    fat: ").append(toIndentedString(fat)).append("\n");
    sb.append("    sugar: ").append(toIndentedString(sugar)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("servingSize");
    openapiFields.add("calories");
    openapiFields.add("carbohydrates");
    openapiFields.add("protein");
    openapiFields.add("fat");
    openapiFields.add("sugar");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to NutritionDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NutritionDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NutritionDto is not found in the empty JSON string", NutritionDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NutritionDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NutritionDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NutritionDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NutritionDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NutritionDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NutritionDto.class));

       return (TypeAdapter<T>) new TypeAdapter<NutritionDto>() {
           @Override
           public void write(JsonWriter out, NutritionDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NutritionDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NutritionDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NutritionDto
  * @throws IOException if the JSON string is invalid with respect to NutritionDto
  */
  public static NutritionDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NutritionDto.class);
  }

 /**
  * Convert an instance of NutritionDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

