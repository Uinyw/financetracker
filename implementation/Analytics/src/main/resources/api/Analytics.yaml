openapi: 3.0.0
info:
  title: Analytics
  version: 1.0.0
  description: Analyse finance data.


tags:
  - name: Analytics

paths:
  /budgetPlan{monthlyAmount}:
    get:
      summary: Get a budget plan of all the data
      tags:
        - Analytics
      parameters:
        - name: monthlyAmount
          in: path
          required: true
          description: Retrieve the amount of money that has to be saved each month
          schema:
            type: string
      responses:
        '200':
          description: Retrieve a budget plan of all the categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetPlanDTO'

  /forecast{months}:
    get:
      summary: Create a new budget forecast for the bank accounts
      tags:
        - Analytics
      parameters:
        - name: months
          in: path
          required: true
          description: Retrieve a detailed forcast using its unique identifier.
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForecastDto'
        '404':
          description: Forecast not createable

  /nutrition:
    post:
      summary: Get the Nutrition in a given timeframe
      tags:
        - Analytics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DurationDto'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NutritionDto'
        '404':
          description: Nutrition values for this timeframe could not be found

  /report:
    get:
      summary: Get a report plan of all the data
      tags:
        - Analytics
      responses:
        '200':
          description: Retrieve a budget plan of all the categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportDto'
        '404':
          description: Report cound not be created

  /testTransfer:
    post:
      summary: Create a new Transaction
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OneTimeTransactionDto'

      responses:
        '200':
          description: Bank Account created.

  /testTransferFixed:
    post:
      summary: Create a new Transaction
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecurringTransactionDto'

      responses:
        '200':
          description: Bank Account created.

components:
  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          example: {"message": "Resource not found"}

    BadRequest:
      description: Bad request
      content:
        application/json:
          example: {"message": "Bad request"}

  schemas:
    ReportDto:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        bankAccounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
        DurationDto:
          $ref: '#/components/schemas/DurationDto'


    BankAccount:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        balance:
          $ref: '#/components/schemas/MonetaryAmountDto'
        dispoLimit:
          $ref: '#/components/schemas/MonetaryAmountDto'
        labels:
          type: array
          items:
            type: string
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    Transaction:
      type: object
      properties:
        referenceID:
          type: string
        labels:
          type: array
          items:
            type: string
        amount:
          $ref: '#/components/schemas/MonetaryAmountDto'
        description:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [incoming, outgoing]


    DurationDto:
      type: object
      properties:
        startTime:
          type: string
        endTime:
          type: string

    Category:
      type: string

    BudgetPlanDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        achievementStatus:
          $ref: '#/components/schemas/BudgetAchievementStatus'
        plan:
          type: array
          items: # <---- dictionary
            $ref: '#/components/schemas/BudgetElementDto'
        date:
          type: string
          format: localDate

    BudgetElementDto:
      type: object
      properties:
        category:
          $ref: '#/components/schemas/Category'
        monetaryAmount:
          $ref: '#/components/schemas/MonetaryAmountDto'

    ForecastElement:
      type: object
      properties:
        bankAccount:
          type: string
          format: uuid
        monetaryAmount:
          $ref: '#/components/schemas/MonetaryAmountDto'

    ForecastDto:
      type: object
      properties:
        months:
          type: integer
        plan:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ForecastElement'
        date:
          type: string
          format: localDate

    NutritionDto:
      type: object
      properties:
        servingSize:
          type: number
          format: double
        calories:
          type: number
          format: double
        carbohydrates:
          type: number
          format: double
        protein:
          type: number
          format: double
        fat:
          type: number
          format: double
        sugar:
          type: number
          format: double


    BudgetAchievementStatus:
      type: string
      enum: [ACHIEVED, FAILED]


    OneTimeTransactionDto:
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionDto'
        - $ref: '#/components/schemas/TransferableDto'

    TransactionDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/TypeDto'
        labels:
          type: array
          items:
            type: string
        transfer:
          $ref: '#/components/schemas/TransferDto'

    TransferableDto:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/MonetaryAmountDto'
        date:
          type: string
          format: Date
        transferStatus:
          $ref: '#/components/schemas/TransferStatusDto'
    TypeDto:
      type: string
      enum: [ SHIFT, INCOME, EXPENSE ]

    TransferStatusDto:
      type: string
      enum: [ INITIAL, FAILED, SUCCESSFUL ]

    TransferDto:
      type: object
      properties:
        sourceBankAccountId:
          type: string
          format: uuid
        externalSourceId:
          type: string
        targetBankAccountId:
          type: string
          format: uuid
        externalTargetId:
          type: string

    MonetaryAmountDto:
      type: object
      properties:
        amount:
          type: number
          format: double

    RecurringTransactionDto:
      type: object
      allOf:
        - properties:
            periodicity:
              $ref: '#/components/schemas/PeriodicityDto'
            startDate:
              type: string
              format: Date
            fixedAmount:
              $ref: '#/components/schemas/MonetaryAmountDto'
            transactionRecords:
              type: array
              items:
                $ref: '#/components/schemas/TransactionRecordDto'
        - $ref: '#/components/schemas/TransactionDto'

    TransactionRecordDto:
      type: object
      allOf:
        - properties:
            id:
              type: string
              format: uuid
        - $ref: '#/components/schemas/TransferableDto'

    PeriodicityDto:
      type: string
      enum: [MONTHLY, QUARTERLY, HALF_YEARLY, YEARLY]


servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/TOBIASKAESSMANN/RestAPI/1.0.0